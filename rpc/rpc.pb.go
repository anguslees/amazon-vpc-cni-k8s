// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddNetworkRequest struct {
	K8S_POD_NAME               string   `protobuf:"bytes,1,opt,name=K8S_POD_NAME,json=k8SPODNAME,proto3" json:"K8S_POD_NAME,omitempty"`
	K8S_POD_NAMESPACE          string   `protobuf:"bytes,2,opt,name=K8S_POD_NAMESPACE,json=k8SPODNAMESPACE,proto3" json:"K8S_POD_NAMESPACE,omitempty"`
	K8S_POD_INFRA_CONTAINER_ID string   `protobuf:"bytes,3,opt,name=K8S_POD_INFRA_CONTAINER_ID,json=k8SPODINFRACONTAINERID,proto3" json:"K8S_POD_INFRA_CONTAINER_ID,omitempty"`
	ContainerID                string   `protobuf:"bytes,7,opt,name=ContainerID,json=containerID,proto3" json:"ContainerID,omitempty"`
	IfName                     string   `protobuf:"bytes,5,opt,name=IfName,json=ifName,proto3" json:"IfName,omitempty"`
	NetworkName                string   `protobuf:"bytes,6,opt,name=NetworkName,json=networkName,proto3" json:"NetworkName,omitempty"`
	Netns                      string   `protobuf:"bytes,4,opt,name=Netns,json=netns,proto3" json:"Netns,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *AddNetworkRequest) Reset()         { *m = AddNetworkRequest{} }
func (m *AddNetworkRequest) String() string { return proto.CompactTextString(m) }
func (*AddNetworkRequest) ProtoMessage()    {}
func (*AddNetworkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_e583b70d770051d5, []int{0}
}
func (m *AddNetworkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddNetworkRequest.Unmarshal(m, b)
}
func (m *AddNetworkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddNetworkRequest.Marshal(b, m, deterministic)
}
func (dst *AddNetworkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNetworkRequest.Merge(dst, src)
}
func (m *AddNetworkRequest) XXX_Size() int {
	return xxx_messageInfo_AddNetworkRequest.Size(m)
}
func (m *AddNetworkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNetworkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddNetworkRequest proto.InternalMessageInfo

func (m *AddNetworkRequest) GetK8S_POD_NAME() string {
	if m != nil {
		return m.K8S_POD_NAME
	}
	return ""
}

func (m *AddNetworkRequest) GetK8S_POD_NAMESPACE() string {
	if m != nil {
		return m.K8S_POD_NAMESPACE
	}
	return ""
}

func (m *AddNetworkRequest) GetK8S_POD_INFRA_CONTAINER_ID() string {
	if m != nil {
		return m.K8S_POD_INFRA_CONTAINER_ID
	}
	return ""
}

func (m *AddNetworkRequest) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *AddNetworkRequest) GetIfName() string {
	if m != nil {
		return m.IfName
	}
	return ""
}

func (m *AddNetworkRequest) GetNetworkName() string {
	if m != nil {
		return m.NetworkName
	}
	return ""
}

func (m *AddNetworkRequest) GetNetns() string {
	if m != nil {
		return m.Netns
	}
	return ""
}

type AddNetworkReply struct {
	Success         bool     `protobuf:"varint,1,opt,name=Success,json=success,proto3" json:"Success,omitempty"`
	IPv4Addr        string   `protobuf:"bytes,2,opt,name=IPv4Addr,json=iPv4Addr,proto3" json:"IPv4Addr,omitempty"`
	DeviceNumber    int32    `protobuf:"varint,4,opt,name=DeviceNumber,json=deviceNumber,proto3" json:"DeviceNumber,omitempty"`
	UseExternalSNAT bool     `protobuf:"varint,5,opt,name=UseExternalSNAT,json=useExternalSNAT,proto3" json:"UseExternalSNAT,omitempty"`
	VPCcidrs        []string `protobuf:"bytes,6,rep,name=VPCcidrs,json=vPCcidrs,proto3" json:"VPCcidrs,omitempty"`
	// start of pod-eni parameters
	PodVlanId            int32    `protobuf:"varint,7,opt,name=PodVlanId,json=podVlanId,proto3" json:"PodVlanId,omitempty"`
	PodENIMAC            string   `protobuf:"bytes,8,opt,name=PodENIMAC,json=podENIMAC,proto3" json:"PodENIMAC,omitempty"`
	PodENISubnetGW       string   `protobuf:"bytes,9,opt,name=PodENISubnetGW,json=podENISubnetGW,proto3" json:"PodENISubnetGW,omitempty"`
	ParentIfIndex        int32    `protobuf:"varint,10,opt,name=ParentIfIndex,json=parentIfIndex,proto3" json:"ParentIfIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddNetworkReply) Reset()         { *m = AddNetworkReply{} }
func (m *AddNetworkReply) String() string { return proto.CompactTextString(m) }
func (*AddNetworkReply) ProtoMessage()    {}
func (*AddNetworkReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_e583b70d770051d5, []int{1}
}
func (m *AddNetworkReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddNetworkReply.Unmarshal(m, b)
}
func (m *AddNetworkReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddNetworkReply.Marshal(b, m, deterministic)
}
func (dst *AddNetworkReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNetworkReply.Merge(dst, src)
}
func (m *AddNetworkReply) XXX_Size() int {
	return xxx_messageInfo_AddNetworkReply.Size(m)
}
func (m *AddNetworkReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNetworkReply.DiscardUnknown(m)
}

var xxx_messageInfo_AddNetworkReply proto.InternalMessageInfo

func (m *AddNetworkReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AddNetworkReply) GetIPv4Addr() string {
	if m != nil {
		return m.IPv4Addr
	}
	return ""
}

func (m *AddNetworkReply) GetDeviceNumber() int32 {
	if m != nil {
		return m.DeviceNumber
	}
	return 0
}

func (m *AddNetworkReply) GetUseExternalSNAT() bool {
	if m != nil {
		return m.UseExternalSNAT
	}
	return false
}

func (m *AddNetworkReply) GetVPCcidrs() []string {
	if m != nil {
		return m.VPCcidrs
	}
	return nil
}

func (m *AddNetworkReply) GetPodVlanId() int32 {
	if m != nil {
		return m.PodVlanId
	}
	return 0
}

func (m *AddNetworkReply) GetPodENIMAC() string {
	if m != nil {
		return m.PodENIMAC
	}
	return ""
}

func (m *AddNetworkReply) GetPodENISubnetGW() string {
	if m != nil {
		return m.PodENISubnetGW
	}
	return ""
}

func (m *AddNetworkReply) GetParentIfIndex() int32 {
	if m != nil {
		return m.ParentIfIndex
	}
	return 0
}

type DelNetworkRequest struct {
	K8S_POD_NAME               string   `protobuf:"bytes,1,opt,name=K8S_POD_NAME,json=k8SPODNAME,proto3" json:"K8S_POD_NAME,omitempty"`
	K8S_POD_NAMESPACE          string   `protobuf:"bytes,2,opt,name=K8S_POD_NAMESPACE,json=k8SPODNAMESPACE,proto3" json:"K8S_POD_NAMESPACE,omitempty"`
	K8S_POD_INFRA_CONTAINER_ID string   `protobuf:"bytes,3,opt,name=K8S_POD_INFRA_CONTAINER_ID,json=k8SPODINFRACONTAINERID,proto3" json:"K8S_POD_INFRA_CONTAINER_ID,omitempty"`
	Reason                     string   `protobuf:"bytes,5,opt,name=Reason,json=reason,proto3" json:"Reason,omitempty"`
	ContainerID                string   `protobuf:"bytes,8,opt,name=ContainerID,json=containerID,proto3" json:"ContainerID,omitempty"`
	IfName                     string   `protobuf:"bytes,6,opt,name=IfName,json=ifName,proto3" json:"IfName,omitempty"`
	NetworkName                string   `protobuf:"bytes,7,opt,name=NetworkName,json=networkName,proto3" json:"NetworkName,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *DelNetworkRequest) Reset()         { *m = DelNetworkRequest{} }
func (m *DelNetworkRequest) String() string { return proto.CompactTextString(m) }
func (*DelNetworkRequest) ProtoMessage()    {}
func (*DelNetworkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_e583b70d770051d5, []int{2}
}
func (m *DelNetworkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelNetworkRequest.Unmarshal(m, b)
}
func (m *DelNetworkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelNetworkRequest.Marshal(b, m, deterministic)
}
func (dst *DelNetworkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelNetworkRequest.Merge(dst, src)
}
func (m *DelNetworkRequest) XXX_Size() int {
	return xxx_messageInfo_DelNetworkRequest.Size(m)
}
func (m *DelNetworkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DelNetworkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DelNetworkRequest proto.InternalMessageInfo

func (m *DelNetworkRequest) GetK8S_POD_NAME() string {
	if m != nil {
		return m.K8S_POD_NAME
	}
	return ""
}

func (m *DelNetworkRequest) GetK8S_POD_NAMESPACE() string {
	if m != nil {
		return m.K8S_POD_NAMESPACE
	}
	return ""
}

func (m *DelNetworkRequest) GetK8S_POD_INFRA_CONTAINER_ID() string {
	if m != nil {
		return m.K8S_POD_INFRA_CONTAINER_ID
	}
	return ""
}

func (m *DelNetworkRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *DelNetworkRequest) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *DelNetworkRequest) GetIfName() string {
	if m != nil {
		return m.IfName
	}
	return ""
}

func (m *DelNetworkRequest) GetNetworkName() string {
	if m != nil {
		return m.NetworkName
	}
	return ""
}

type DelNetworkReply struct {
	Success      bool   `protobuf:"varint,1,opt,name=Success,json=success,proto3" json:"Success,omitempty"`
	IPv4Addr     string `protobuf:"bytes,2,opt,name=IPv4Addr,json=iPv4Addr,proto3" json:"IPv4Addr,omitempty"`
	DeviceNumber int32  `protobuf:"varint,3,opt,name=DeviceNumber,json=deviceNumber,proto3" json:"DeviceNumber,omitempty"`
	// start of pod-eni parameters
	PodVlanId            int32    `protobuf:"varint,4,opt,name=PodVlanId,json=podVlanId,proto3" json:"PodVlanId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelNetworkReply) Reset()         { *m = DelNetworkReply{} }
func (m *DelNetworkReply) String() string { return proto.CompactTextString(m) }
func (*DelNetworkReply) ProtoMessage()    {}
func (*DelNetworkReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_e583b70d770051d5, []int{3}
}
func (m *DelNetworkReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelNetworkReply.Unmarshal(m, b)
}
func (m *DelNetworkReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelNetworkReply.Marshal(b, m, deterministic)
}
func (dst *DelNetworkReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelNetworkReply.Merge(dst, src)
}
func (m *DelNetworkReply) XXX_Size() int {
	return xxx_messageInfo_DelNetworkReply.Size(m)
}
func (m *DelNetworkReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DelNetworkReply.DiscardUnknown(m)
}

var xxx_messageInfo_DelNetworkReply proto.InternalMessageInfo

func (m *DelNetworkReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *DelNetworkReply) GetIPv4Addr() string {
	if m != nil {
		return m.IPv4Addr
	}
	return ""
}

func (m *DelNetworkReply) GetDeviceNumber() int32 {
	if m != nil {
		return m.DeviceNumber
	}
	return 0
}

func (m *DelNetworkReply) GetPodVlanId() int32 {
	if m != nil {
		return m.PodVlanId
	}
	return 0
}

func init() {
	proto.RegisterType((*AddNetworkRequest)(nil), "rpc.AddNetworkRequest")
	proto.RegisterType((*AddNetworkReply)(nil), "rpc.AddNetworkReply")
	proto.RegisterType((*DelNetworkRequest)(nil), "rpc.DelNetworkRequest")
	proto.RegisterType((*DelNetworkReply)(nil), "rpc.DelNetworkReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CNIBackendClient is the client API for CNIBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CNIBackendClient interface {
	AddNetwork(ctx context.Context, in *AddNetworkRequest, opts ...grpc.CallOption) (*AddNetworkReply, error)
	DelNetwork(ctx context.Context, in *DelNetworkRequest, opts ...grpc.CallOption) (*DelNetworkReply, error)
}

type cNIBackendClient struct {
	cc *grpc.ClientConn
}

func NewCNIBackendClient(cc *grpc.ClientConn) CNIBackendClient {
	return &cNIBackendClient{cc}
}

func (c *cNIBackendClient) AddNetwork(ctx context.Context, in *AddNetworkRequest, opts ...grpc.CallOption) (*AddNetworkReply, error) {
	out := new(AddNetworkReply)
	err := c.cc.Invoke(ctx, "/rpc.CNIBackend/AddNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIBackendClient) DelNetwork(ctx context.Context, in *DelNetworkRequest, opts ...grpc.CallOption) (*DelNetworkReply, error) {
	out := new(DelNetworkReply)
	err := c.cc.Invoke(ctx, "/rpc.CNIBackend/DelNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CNIBackendServer is the server API for CNIBackend service.
type CNIBackendServer interface {
	AddNetwork(context.Context, *AddNetworkRequest) (*AddNetworkReply, error)
	DelNetwork(context.Context, *DelNetworkRequest) (*DelNetworkReply, error)
}

func RegisterCNIBackendServer(s *grpc.Server, srv CNIBackendServer) {
	s.RegisterService(&_CNIBackend_serviceDesc, srv)
}

func _CNIBackend_AddNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIBackendServer).AddNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIBackend/AddNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIBackendServer).AddNetwork(ctx, req.(*AddNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIBackend_DelNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIBackendServer).DelNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIBackend/DelNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIBackendServer).DelNetwork(ctx, req.(*DelNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CNIBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.CNIBackend",
	HandlerType: (*CNIBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNetwork",
			Handler:    _CNIBackend_AddNetwork_Handler,
		},
		{
			MethodName: "DelNetwork",
			Handler:    _CNIBackend_DelNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_rpc_e583b70d770051d5) }

var fileDescriptor_rpc_e583b70d770051d5 = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xcd, 0x6e, 0x9b, 0x4a,
	0x14, 0x8e, 0xed, 0x18, 0xe3, 0x13, 0x27, 0x96, 0x47, 0x91, 0x35, 0xb2, 0xee, 0xc2, 0x42, 0x57,
	0x55, 0xd4, 0x45, 0x16, 0x6d, 0x17, 0x51, 0xd5, 0x0d, 0x05, 0x5a, 0x8d, 0xaa, 0x8c, 0x11, 0xa4,
	0xe9, 0xd2, 0xc2, 0xcc, 0x44, 0x42, 0x26, 0x03, 0x1d, 0xc0, 0x4d, 0xde, 0xa0, 0x5d, 0x55, 0x7d,
	0x9e, 0xbe, 0x5c, 0xc5, 0x80, 0x0b, 0xb6, 0xab, 0xac, 0xba, 0xe8, 0xf2, 0xfb, 0xd3, 0xe1, 0x1c,
	0x3e, 0x0d, 0x0c, 0x65, 0x1a, 0x5e, 0xa6, 0x32, 0xc9, 0x13, 0xd4, 0x93, 0x69, 0x68, 0x7c, 0xef,
	0xc2, 0xc4, 0x64, 0x8c, 0xf2, 0xfc, 0x4b, 0x22, 0xd7, 0x1e, 0xff, 0x5c, 0xf0, 0x2c, 0x47, 0x73,
	0x18, 0x7d, 0xb8, 0xf2, 0x97, 0xee, 0xc2, 0x5e, 0x52, 0xf3, 0xda, 0xc1, 0x9d, 0x79, 0xe7, 0x62,
	0xe8, 0xc1, 0xfa, 0xca, 0x77, 0x17, 0x76, 0xc9, 0xa0, 0xe7, 0x30, 0x69, 0x3b, 0x7c, 0xd7, 0xb4,
	0x1c, 0xdc, 0x55, 0xb6, 0x71, 0x63, 0x53, 0x34, 0x7a, 0x0d, 0xb3, 0xad, 0x97, 0xd0, 0x77, 0x9e,
	0xb9, 0xb4, 0x16, 0xf4, 0xc6, 0x24, 0xd4, 0xf1, 0x96, 0xc4, 0xc6, 0x3d, 0x15, 0x9a, 0x56, 0x21,
	0xa5, 0xff, 0x96, 0x89, 0x8d, 0xe6, 0x70, 0x62, 0x25, 0x22, 0x0f, 0x22, 0xc1, 0x25, 0xb1, 0xf1,
	0x40, 0x99, 0x4f, 0xc2, 0x86, 0x42, 0x53, 0xd0, 0xc8, 0x1d, 0x0d, 0xee, 0x39, 0xee, 0x2b, 0x51,
	0x8b, 0x14, 0x2a, 0x93, 0xf5, 0x56, 0x4a, 0xd4, 0xaa, 0xa4, 0x68, 0x28, 0x74, 0x0e, 0x7d, 0xca,
	0x73, 0x91, 0xe1, 0x63, 0xa5, 0xf5, 0x45, 0x09, 0x8c, 0x9f, 0x5d, 0x18, 0xb7, 0x2f, 0x92, 0xc6,
	0x8f, 0x08, 0xc3, 0xc0, 0x2f, 0xc2, 0x90, 0x67, 0x99, 0x3a, 0x85, 0xee, 0x0d, 0xb2, 0x0a, 0xa2,
	0x19, 0xe8, 0xc4, 0xdd, 0xbc, 0x32, 0x19, 0x93, 0xf5, 0xfa, 0x7a, 0x54, 0x63, 0x64, 0xc0, 0xc8,
	0xe6, 0x9b, 0x28, 0xe4, 0xb4, 0xb8, 0x5f, 0x71, 0xa9, 0xc6, 0xf4, 0xbd, 0x11, 0x6b, 0x71, 0xe8,
	0x02, 0xc6, 0x1f, 0x33, 0xee, 0x3c, 0xe4, 0x5c, 0x8a, 0x20, 0xf6, 0xa9, 0x79, 0xa3, 0xd6, 0xd0,
	0xbd, 0x71, 0xb1, 0x4b, 0x97, 0x93, 0x6e, 0x5d, 0x2b, 0x8c, 0x98, 0xcc, 0xb0, 0x36, 0xef, 0x95,
	0x93, 0x36, 0x35, 0x46, 0xff, 0xc1, 0xd0, 0x4d, 0xd8, 0x6d, 0x1c, 0x08, 0xc2, 0xd4, 0x8d, 0xfa,
	0xde, 0x30, 0xdd, 0x12, 0xb5, 0xea, 0x50, 0x72, 0x6d, 0x5a, 0x58, 0x57, 0x1f, 0x59, 0xaa, 0x15,
	0x81, 0x9e, 0xc1, 0x59, 0xa5, 0xfa, 0xc5, 0x4a, 0xf0, 0xfc, 0xfd, 0x27, 0x3c, 0x54, 0x96, 0xb3,
	0x74, 0x87, 0x45, 0xff, 0xc3, 0xa9, 0x1b, 0x48, 0x2e, 0x72, 0x72, 0x47, 0x04, 0xe3, 0x0f, 0x18,
	0xd4, 0x9c, 0xd3, 0xb4, 0x4d, 0x1a, 0x3f, 0xba, 0x30, 0xb1, 0x79, 0xfc, 0xcf, 0xf6, 0x69, 0x0a,
	0x9a, 0xc7, 0x83, 0x2c, 0x11, 0xdb, 0xb6, 0x48, 0x85, 0xf6, 0x7b, 0xa6, 0x3f, 0xd5, 0x33, 0xed,
	0xa9, 0x9e, 0x0d, 0x0e, 0x7a, 0x66, 0x7c, 0xeb, 0xc0, 0xb8, 0x7d, 0x93, 0xbf, 0xd7, 0xa8, 0xde,
	0x1f, 0x1a, 0xb5, 0xd3, 0x85, 0xe3, 0xbd, 0x2e, 0xbc, 0xf8, 0xda, 0x01, 0xb0, 0x28, 0x79, 0x1b,
	0x84, 0x6b, 0x2e, 0x18, 0x7a, 0x03, 0xd0, 0x74, 0x1d, 0x4d, 0x2f, 0xcb, 0xd7, 0xe1, 0xe0, 0x39,
	0x98, 0x9d, 0x1f, 0xf0, 0x69, 0xfc, 0x68, 0x1c, 0x95, 0xe9, 0x66, 0xaf, 0x3a, 0x7d, 0xf0, 0xf3,
	0xeb, 0xf4, 0xde, 0x01, 0x8c, 0xa3, 0x95, 0xa6, 0x9e, 0xa1, 0x97, 0xbf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x75, 0x60, 0xb1, 0xf7, 0x93, 0x04, 0x00, 0x00,
}
